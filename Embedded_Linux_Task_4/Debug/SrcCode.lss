
SrcCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aea  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074c  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000776  00000000  00000000  00001596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000523  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000756  00000000  00000000  000022fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002a51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enumSetPin>:

DIO_enumError_t DIO_enumSetPin(DIO_enumPorts_t Copy_enumPortNum,DIO_enumPins_t Copy_enumPinNum,DIO_enumLogicState_t Copy_enumLogicState)
{
	DIO_enumError_t DIO_ErrorState = NOK;
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_enumSetPin+0x6>
  70:	90 c0       	rjmp	.+288    	; 0x192 <DIO_enumSetPin+0x126>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_enumSetPin+0xc>
  76:	8f c0       	rjmp	.+286    	; 0x196 <DIO_enumSetPin+0x12a>
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_enumSetPin+0x12>
  7c:	8e c0       	rjmp	.+284    	; 0x19a <DIO_enumSetPin+0x12e>
	{
		DIO_ErrorState = OK;
		switch (Copy_enumPortNum)
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	41 f1       	breq	.+80     	; 0xd2 <DIO_enumSetPin+0x66>
  82:	38 f0       	brcs	.+14     	; 0x92 <DIO_enumSetPin+0x26>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	09 f4       	brne	.+2      	; 0x8a <DIO_enumSetPin+0x1e>
  88:	44 c0       	rjmp	.+136    	; 0x112 <DIO_enumSetPin+0xa6>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	09 f4       	brne	.+2      	; 0x90 <DIO_enumSetPin+0x24>
  8e:	61 c0       	rjmp	.+194    	; 0x152 <DIO_enumSetPin+0xe6>
  90:	86 c0       	rjmp	.+268    	; 0x19e <DIO_enumSetPin+0x132>
		{
			case PORTA_Choice:
			switch (Copy_enumLogicState)
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DIO_enumSetPin+0x30>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	71 f0       	breq	.+28     	; 0xb6 <DIO_enumSetPin+0x4a>
  9a:	83 c0       	rjmp	.+262    	; 0x1a2 <DIO_enumSetPin+0x136>
			{
				case LOW:
				Clr_Bit(PORTA , Copy_enumPinNum);
  9c:	2b b3       	in	r18, 0x1b	; 27
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_enumSetPin+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_enumSetPin+0x38>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8b bb       	out	0x1b, r24	; 27
{
	DIO_enumError_t DIO_ErrorState = NOK;
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
	{
		DIO_ErrorState = OK;
  b2:	81 e0       	ldi	r24, 0x01	; 1
			case PORTA_Choice:
			switch (Copy_enumLogicState)
			{
				case LOW:
				Clr_Bit(PORTA , Copy_enumPinNum);
				break;
  b4:	08 95       	ret
				case HIGH:
				Set_Bit (PORTA , Copy_enumPinNum);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_enumSetPin+0x54>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_enumSetPin+0x50>
  c4:	2b b3       	in	r18, 0x1b	; 27
  c6:	82 2b       	or	r24, r18
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	89 2b       	or	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
{
	DIO_enumError_t DIO_ErrorState = NOK;
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
	{
		DIO_ErrorState = OK;
  ce:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				Clr_Bit(PORTA , Copy_enumPinNum);
				break;
				case HIGH:
				Set_Bit (PORTA , Copy_enumPinNum);
				break;
  d0:	08 95       	ret
				default:
				break;
			}
			break;
			case PORTB_Choice:
			switch (Copy_enumLogicState)
  d2:	44 23       	and	r20, r20
  d4:	19 f0       	breq	.+6      	; 0xdc <DIO_enumSetPin+0x70>
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	71 f0       	breq	.+28     	; 0xf6 <DIO_enumSetPin+0x8a>
  da:	65 c0       	rjmp	.+202    	; 0x1a6 <DIO_enumSetPin+0x13a>
			{
				case LOW:
				Clr_Bit(PORTB, Copy_enumPinNum);
  dc:	28 b3       	in	r18, 0x18	; 24
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_enumSetPin+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_enumSetPin+0x78>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	88 bb       	out	0x18, r24	; 24
{
	DIO_enumError_t DIO_ErrorState = NOK;
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
	{
		DIO_ErrorState = OK;
  f2:	81 e0       	ldi	r24, 0x01	; 1
			case PORTB_Choice:
			switch (Copy_enumLogicState)
			{
				case LOW:
				Clr_Bit(PORTB, Copy_enumPinNum);
				break;
  f4:	08 95       	ret
				case HIGH:
				Set_Bit (PORTB , Copy_enumPinNum);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_enumSetPin+0x94>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_enumSetPin+0x90>
 104:	28 b3       	in	r18, 0x18	; 24
 106:	82 2b       	or	r24, r18
 108:	98 b3       	in	r25, 0x18	; 24
 10a:	89 2b       	or	r24, r25
 10c:	88 bb       	out	0x18, r24	; 24
{
	DIO_enumError_t DIO_ErrorState = NOK;
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
	{
		DIO_ErrorState = OK;
 10e:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				Clr_Bit(PORTB, Copy_enumPinNum);
				break;
				case HIGH:
				Set_Bit (PORTB , Copy_enumPinNum);
				break;
 110:	08 95       	ret
				break;
			}
			break;
			#if NUM_OF_PORTS == THREE_PORTS || NUM_OF_PORTS == FOUR_PORTS
			case PORTC_Choice:
			switch (Copy_enumLogicState)
 112:	44 23       	and	r20, r20
 114:	19 f0       	breq	.+6      	; 0x11c <DIO_enumSetPin+0xb0>
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	71 f0       	breq	.+28     	; 0x136 <DIO_enumSetPin+0xca>
 11a:	47 c0       	rjmp	.+142    	; 0x1aa <DIO_enumSetPin+0x13e>
			{
				case LOW:
				Clr_Bit(PORTC, Copy_enumPinNum);
 11c:	25 b3       	in	r18, 0x15	; 21
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_enumSetPin+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_enumSetPin+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	85 bb       	out	0x15, r24	; 21
{
	DIO_enumError_t DIO_ErrorState = NOK;
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
	{
		DIO_ErrorState = OK;
 132:	81 e0       	ldi	r24, 0x01	; 1
			case PORTC_Choice:
			switch (Copy_enumLogicState)
			{
				case LOW:
				Clr_Bit(PORTC, Copy_enumPinNum);
				break;
 134:	08 95       	ret
				case HIGH:
				Set_Bit (PORTC , Copy_enumPinNum);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_enumSetPin+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_enumSetPin+0xd0>
 144:	25 b3       	in	r18, 0x15	; 21
 146:	82 2b       	or	r24, r18
 148:	95 b3       	in	r25, 0x15	; 21
 14a:	89 2b       	or	r24, r25
 14c:	85 bb       	out	0x15, r24	; 21
{
	DIO_enumError_t DIO_ErrorState = NOK;
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
	{
		DIO_ErrorState = OK;
 14e:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				Clr_Bit(PORTC, Copy_enumPinNum);
				break;
				case HIGH:
				Set_Bit (PORTC , Copy_enumPinNum);
				break;
 150:	08 95       	ret
			}
			break;
			#endif
			#if NUM_OF_PORTS == FOUR_PORTS
			case PORTD_Choice:
			switch (Copy_enumLogicState)
 152:	44 23       	and	r20, r20
 154:	19 f0       	breq	.+6      	; 0x15c <DIO_enumSetPin+0xf0>
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	71 f0       	breq	.+28     	; 0x176 <DIO_enumSetPin+0x10a>
 15a:	29 c0       	rjmp	.+82     	; 0x1ae <DIO_enumSetPin+0x142>
			{
				case LOW:
				Clr_Bit(PORTD, Copy_enumPinNum);
 15c:	22 b3       	in	r18, 0x12	; 18
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_enumSetPin+0xfc>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_enumSetPin+0xf8>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	82 bb       	out	0x12, r24	; 18
{
	DIO_enumError_t DIO_ErrorState = NOK;
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
	{
		DIO_ErrorState = OK;
 172:	81 e0       	ldi	r24, 0x01	; 1
			case PORTD_Choice:
			switch (Copy_enumLogicState)
			{
				case LOW:
				Clr_Bit(PORTD, Copy_enumPinNum);
				break;
 174:	08 95       	ret
				case HIGH:
				Set_Bit (PORTD , Copy_enumPinNum);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_enumSetPin+0x114>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_enumSetPin+0x110>
 184:	22 b3       	in	r18, 0x12	; 18
 186:	82 2b       	or	r24, r18
 188:	92 b3       	in	r25, 0x12	; 18
 18a:	89 2b       	or	r24, r25
 18c:	82 bb       	out	0x12, r24	; 18
{
	DIO_enumError_t DIO_ErrorState = NOK;
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
	{
		DIO_ErrorState = OK;
 18e:	81 e0       	ldi	r24, 0x01	; 1
				case LOW:
				Clr_Bit(PORTD, Copy_enumPinNum);
				break;
				case HIGH:
				Set_Bit (PORTD , Copy_enumPinNum);
				break;
 190:	08 95       	ret
	
}

DIO_enumError_t DIO_enumSetPin(DIO_enumPorts_t Copy_enumPortNum,DIO_enumPins_t Copy_enumPinNum,DIO_enumLogicState_t Copy_enumLogicState)
{
	DIO_enumError_t DIO_ErrorState = NOK;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
	/*Error Check For Port , Pin and Logic State*/
	if ( ( (Copy_enumPortNum >= PORTA_Choice ) && (Copy_enumPortNum <= PORTD_Choice) ) && ( ( Copy_enumPinNum >= PIN0 )  && (Copy_enumPinNum <= PIN7 ) ) &&( (Copy_enumLogicState >= LOW) && ( Copy_enumLogicState <= HIGH )))
	{
		DIO_ErrorState = OK;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	08 95       	ret
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	08 95       	ret
 1ae:	81 e0       	ldi	r24, 0x01	; 1
	{
		/*Do Nothing*/
	}
	
	return DIO_ErrorState;
}
 1b0:	08 95       	ret

000001b2 <PORT_vidInit>:
		#define PIN31_PORT  PORT_LOW
		#else
		#error "Invalid Configuration"
		#endif
		/*Concat The bits in Registers*/
		DDRA = CONCAT(
 1b2:	80 e1       	ldi	r24, 0x10	; 16
 1b4:	8a bb       	out	0x1a, r24	; 26
		PIN1_DIR,
		PIN0_DIR
		
		);
		
		DDRB = CONCAT(
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	87 bb       	out	0x17, r24	; 23
		PIN8_DIR

		);
		
		
		PORTA = CONCAT(
 1ba:	1b ba       	out	0x1b, r1	; 27
		PIN0_PORT

		);


		PORTB = CONCAT(
 1bc:	18 ba       	out	0x18, r1	; 24

		);
		
		
		#if NUM_OF_PORTS == THREE_PORTS || NUM_OF_PORTS == FOUR_PORTS
		DDRC = CONCAT(
 1be:	14 ba       	out	0x14, r1	; 20
		PIN16_DIR

		);
		
		
		PORTC = CONCAT(
 1c0:	15 ba       	out	0x15, r1	; 21
		);

		#endif
		
		#if NUM_OF_PORTS == FOUR_PORTS
		DDRD = CONCAT(
 1c2:	11 ba       	out	0x11, r1	; 17
		PIN25_DIR,
		PIN24_DIR

		);
		
		PORTD = CONCAT(
 1c4:	80 e4       	ldi	r24, 0x40	; 64
 1c6:	82 bb       	out	0x12, r24	; 18
 1c8:	08 95       	ret

000001ca <main>:
	int main(void)
	{
		// Replace with your application code
		//Set PA1 , PB1 as outputs
		
		PORT_vidInit();
 1ca:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <PORT_vidInit>
		
		while (1)
		{
			//LED PA1 is on for 1000ms
			DIO_enumSetPin (PORTC_Choice , PIN4 , HIGH);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	64 e0       	ldi	r22, 0x04	; 4
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	2f e3       	ldi	r18, 0x3F	; 63
 1da:	8d e0       	ldi	r24, 0x0D	; 13
 1dc:	93 e0       	ldi	r25, 0x03	; 3
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x14>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x1e>
 1e8:	00 00       	nop
			_delay_ms(1000);
			DIO_enumSetPin (PORTC_Choice , PIN4 , LOW);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	64 e0       	ldi	r22, 0x04	; 4
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPin>
			DIO_enumSetPin (PORTD_Choice , PIN1 , HIGH);
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPin>
 1fe:	2f e3       	ldi	r18, 0x3F	; 63
 200:	8d e0       	ldi	r24, 0x0D	; 13
 202:	93 e0       	ldi	r25, 0x03	; 3
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0x3a>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x44>
 20e:	00 00       	nop
			_delay_ms(1000);
			DIO_enumSetPin (PORTD_Choice , PIN1 , LOW);
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPin>
 21a:	d9 cf       	rjmp	.-78     	; 0x1ce <main+0x4>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
